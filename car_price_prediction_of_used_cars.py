# -*- coding: utf-8 -*-
"""Car price prediction of used cars

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10SdClXncyjwRq88crlU2XyoYff2sK-HN
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
uploaded=files.upload()
df=pd.read_csv('car data.csv')

df.head()

print(df['Fuel_Type'].unique())
print(df['Seller_Type'].unique())
print(df['Transmission'].unique())
print(df['Owner'].unique())

df.shape

new_df=df.drop(["Car_Name"], axis = 1, inplace = True)

df.head()

df['Present_year']=2020

df

df['Age']=df['Present_year']-df['Year']

from sklearn.preprocessing import LabelEncoder
lb_x=LabelEncoder()
df.iloc[:,3]=lb_x.fit_transform(df.iloc[:,3].values)
df

df=df.drop(["Year","Present_year"],axis=1)

df

from sklearn.preprocessing import LabelEncoder
lb_x=LabelEncoder()
df.iloc[:,3]=lb_x.fit_transform(df.iloc[:,3].values)
df.iloc[:,3]

df.iloc[:,4:5]=lb_x.fit_transform(df.iloc[:,4:5].values)
df.iloc[:,4:5]

df.iloc[:,5]=lb_x.fit_transform(df.iloc[:,5].values)
df.iloc[:,5]

df

df.corr()

plt.figure(figsize=(10,10))
sns.heatmap(df.iloc[:,0:8].corr())

price=df['Selling_Price']
df.drop(["Selling_Price"],axis=1)

price

Y=price

Y

X=df.iloc[:,0:7]
X

from sklearn.model_selection import train_test_split

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.25,random_state=0)

X_train.shape

Y_train.shape

from sklearn.model_selection import RandomizedSearchCV
params =       {'bootstrap': [True, False],
               'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110,120,130, None],
               'max_features': ['auto', 'sqrt'],
               'min_samples_leaf': [1, 2, 4],
               'min_samples_split': [2,3,4,5,6,8,10],
               'n_estimators': [100,200,300,500,600,700]}

from sklearn.ensemble import RandomForestRegressor
model=RandomForestRegressor()
model_random=RandomizedSearchCV(model,param_distributions=params,cv=5,verbose=3,random_state=22)
model_random.fit(X_train,Y_train)

predictions=model_random.predict(X_test)
predictions

model_random.score(X_test,Y_test)

model_random.best_params_

model_random.best_score_





